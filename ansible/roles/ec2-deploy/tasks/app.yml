---
  # fetch source code and install
- name: Clone source repository
  git:
    repo: "{{ repo_url }}"
    dest: /home/{{ ansible_ssh_user }}/{{ app_name }}
    update: yes  # Does a git pull if the repo already exists
    force: yes

- name: Install virtualenv packages
  pip:
    requirements: /home/{{ ansible_ssh_user }}/{{ app_name }}/requirements.txt
    virtualenv: /home/{{ ansible_ssh_user }}/{{ app_name }}/env
    virtualenv_python: python3

- name: Install {{ app_name }} source
  pip:
    name: /home/{{ ansible_ssh_user }}/{{ app_name }}
    extra_args: '-e'   # this creates a link rather then copying the files
    virtualenv: /home/{{ ansible_ssh_user }}/{{ app_name }}/env

# - name: Clear migration artifacts
#   file:
#     state: absent
#     path: /home/{{ ansible_ssh_user }}/{{ app_name }}/migrations/

- name: Manager database initalization
  command: >
    /home/{{ ansible_ssh_user }}/{{ app_name }}/env/bin/{{ entry_point }}
    db
    init
  ignore_errors: yes
  args:
    chdir: /home/{{ ansible_ssh_user }}/{{ app_name }}
  environment:
    PGPASSWORD: "{{ postgres_password }}"

- name: Manager database migration
  command: >
    /home/{{ ansible_ssh_user }}/{{ app_name }}/env/bin/{{ entry_point }}
    db
    migrate
  ignore_errors: yes
  args:
    chdir: /home/{{ ansible_ssh_user }}/{{ app_name }}
  environment:
    PGPASSWORD: "{{ postgres_password }}"

- name: Manager database upgrade
  command: >
    /home/{{ ansible_ssh_user }}/{{ app_name }}/env/bin/{{ entry_point }}
    db
    upgrade
  ignore_errors: no
  args:
    chdir: /home/{{ ansible_ssh_user }}/{{ app_name }}
  environment:
    PGPASSWORD: "{{ postgres_password }}"


# - name: Run a Python script with cli args
#   command: >
#     /home/{{ ansible_ssh_user }}/{{ app_name }}/env/bin/python
#     ./manage.py
#     db
#     upgrade
#   ignore_errors: yes
#   args:
#     chdir: /home/{{ ansible_ssh_user }}/{{ app_name }}
#   environment:
#     PGPASSWORD: "{{ postgres_password }}"
